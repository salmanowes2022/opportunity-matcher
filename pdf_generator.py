from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from io import BytesIO
from datetime import datetime
from models import UserProfile, Opportunity, MatchResult

def generate_evaluation_pdf(profile: UserProfile, opportunity: Opportunity, result: MatchResult):
    """Generate a professional PDF report of the evaluation"""
    
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, topMargin=0.5*inch)
    
    # Get styles
    styles = getSampleStyleSheet()
    
    # Custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=20,
        spaceAfter=30,
        textColor=colors.HexColor('#1f4e79'),
        alignment=1  # Center alignment
    )
    
    header_style = ParagraphStyle(
        'CustomHeader',
        parent=styles['Heading2'],
        fontSize=14,
        spaceBefore=20,
        spaceAfter=10,
        textColor=colors.HexColor('#2c5aa0')
    )
    
    content = []
    
    # Title
    content.append(Paragraph("Opportunity Matching Report", title_style))
    content.append(Spacer(1, 20))
    
    # Report metadata
    report_date = datetime.now().strftime("%B %d, %Y at %I:%M %p")
    content.append(Paragraph(f"<b>Generated:</b> {report_date}", styles['Normal']))
    content.append(Spacer(1, 20))
    
    # Executive Summary
    content.append(Paragraph("Executive Summary", header_style))
    
    score_color = "green" if result.compatibility_score >= 0.7 else "orange" if result.compatibility_score >= 0.5 else "red"
    recommendation = "Highly Recommended" if result.compatibility_score >= 0.7 else "Recommended" if result.compatibility_score >= 0.5 else "Consider Gaps"
    
    summary_data = [
        ['Candidate', profile.name],
        ['Opportunity', opportunity.title],
        ['Compatibility Score', f"{result.compatibility_score:.1%}"],
        ['Recommendation', recommendation]
    ]
    
    summary_table = Table(summary_data, colWidths=[2*inch, 4*inch])
    summary_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f0f0f0')),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 11),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('VALIGN', (0, 0), (-1, -1), 'TOP')
    ]))
    
    content.append(summary_table)
    content.append(Spacer(1, 20))
    
    # Candidate Profile
    content.append(Paragraph("Candidate Profile", header_style))
    
    profile_data = [
        ['Education', f"{profile.education_level} in {profile.field_of_study}"],
        ['GPA', str(profile.gpa) if profile.gpa else "Not provided"],
        ['Experience', f"{profile.experience_years} years"],
        ['Languages', profile.languages],
        ['Key Skills', profile.skills]
    ]
    
    profile_table = Table(profile_data, colWidths=[1.5*inch, 4.5*inch])
    profile_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f0f0f0')),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('VALIGN', (0, 0), (-1, -1), 'TOP')
    ]))
    
    content.append(profile_table)
    content.append(Spacer(1, 20))
    
    # Opportunity Details
    content.append(Paragraph("Opportunity Details", header_style))
    content.append(Paragraph(f"<b>Title:</b> {opportunity.title}", styles['Normal']))
    content.append(Paragraph(f"<b>Type:</b> {opportunity.opp_type}", styles['Normal']))
    if opportunity.deadline:
        content.append(Paragraph(f"<b>Deadline:</b> {opportunity.deadline}", styles['Normal']))
    content.append(Spacer(1, 15))
    
    # Analysis Results
    content.append(Paragraph("Detailed Analysis", header_style))
    
    content.append(Paragraph("<b>Your Strengths:</b>", styles['Normal']))
    content.append(Paragraph(result.strengths, styles['Normal']))
    content.append(Spacer(1, 10))
    
    content.append(Paragraph("<b>Areas to Address:</b>", styles['Normal']))
    content.append(Paragraph(result.gaps, styles['Normal']))
    content.append(Spacer(1, 10))
    
    content.append(Paragraph("<b>Recommendation:</b>", styles['Normal']))
    content.append(Paragraph(result.recommendation, styles['Normal']))
    content.append(Spacer(1, 20))
    
    # Footer
    content.append(Paragraph("This report was generated by the Opportunity Matching Assistant", 
                            ParagraphStyle('Footer', parent=styles['Normal'], 
                                         fontSize=8, textColor=colors.grey, alignment=1)))
    
    # Build PDF
    doc.build(content)
    buffer.seek(0)
    return buffer

def generate_profile_summary_pdf(profile: UserProfile):
    """Generate a PDF summary of user profile"""
    
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, topMargin=0.5*inch)
    
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        textColor=colors.HexColor('#1f4e79'),
        alignment=1
    )
    
    content = []
    
    # Title
    content.append(Paragraph(f"Profile Summary - {profile.name}", title_style))
    content.append(Spacer(1, 20))
    
    # Profile details in table format
    profile_data = [
        ['Name', profile.name],
        ['Education', f"{profile.education_level} in {profile.field_of_study}"],
        ['GPA', str(profile.gpa) if profile.gpa else "Not provided"],
        ['Experience', f"{profile.experience_years} years"],
        ['Languages', profile.languages],
        ['Skills', profile.skills],
    ]
    
    profile_table = Table(profile_data, colWidths=[1.5*inch, 4.5*inch])
    profile_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f0f0f0')),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 11),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('VALIGN', (0, 0), (-1, -1), 'TOP')
    ]))
    
    content.append(profile_table)
    content.append(Spacer(1, 20))
    
    # Achievements
    content.append(Paragraph("Key Achievements", styles['Heading2']))
    content.append(Paragraph(profile.achievements, styles['Normal']))
    content.append(Spacer(1, 15))
    
    # Goals
    content.append(Paragraph("Goals & Aspirations", styles['Heading2']))
    content.append(Paragraph(profile.goals, styles['Normal']))
    
    doc.build(content)
    buffer.seek(0)
    return buffer